//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Settings/Inputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Inputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Inputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Inputs"",
    ""maps"": [
        {
            ""name"": ""MainMap"",
            ""id"": ""f5fbbfe4-a085-4a80-9f7c-847878c5d052"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1a80633b-d117-425c-8807-04576f6220e7"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bb687dae-9a81-4fc7-8ac5-b00d1734a5cb"",
                    ""path"": ""<Gyroscope>/angularVelocity"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileGyro"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a99e57c-04f9-4355-9923-cfb17767212c"",
                    ""path"": ""<Accelerometer>/acceleration"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileAccel"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c085856-a6a5-4a15-a249-7517e99a102c"",
                    ""path"": ""<Joystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""MobileClear"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""MobileGyro"",
            ""bindingGroup"": ""MobileGyro"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gyroscope>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""MobileAccel"",
            ""bindingGroup"": ""MobileAccel"",
            ""devices"": [
                {
                    ""devicePath"": ""<Accelerometer>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""MobileClear"",
            ""bindingGroup"": ""MobileClear"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MainMap
        m_MainMap = asset.FindActionMap("MainMap", throwIfNotFound: true);
        m_MainMap_Move = m_MainMap.FindAction("Move", throwIfNotFound: true);
    }

    ~@Inputs()
    {
        UnityEngine.Debug.Assert(!m_MainMap.enabled, "This will cause a leak and performance issues, Inputs.MainMap.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MainMap
    private readonly InputActionMap m_MainMap;
    private List<IMainMapActions> m_MainMapActionsCallbackInterfaces = new List<IMainMapActions>();
    private readonly InputAction m_MainMap_Move;
    public struct MainMapActions
    {
        private @Inputs m_Wrapper;
        public MainMapActions(@Inputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_MainMap_Move;
        public InputActionMap Get() { return m_Wrapper.m_MainMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMapActions set) { return set.Get(); }
        public void AddCallbacks(IMainMapActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        private void UnregisterCallbacks(IMainMapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        public void RemoveCallbacks(IMainMapActions instance)
        {
            if (m_Wrapper.m_MainMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMapActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMapActions @MainMap => new MainMapActions(this);
    private int m_MobileGyroSchemeIndex = -1;
    public InputControlScheme MobileGyroScheme
    {
        get
        {
            if (m_MobileGyroSchemeIndex == -1) m_MobileGyroSchemeIndex = asset.FindControlSchemeIndex("MobileGyro");
            return asset.controlSchemes[m_MobileGyroSchemeIndex];
        }
    }
    private int m_MobileAccelSchemeIndex = -1;
    public InputControlScheme MobileAccelScheme
    {
        get
        {
            if (m_MobileAccelSchemeIndex == -1) m_MobileAccelSchemeIndex = asset.FindControlSchemeIndex("MobileAccel");
            return asset.controlSchemes[m_MobileAccelSchemeIndex];
        }
    }
    private int m_MobileClearSchemeIndex = -1;
    public InputControlScheme MobileClearScheme
    {
        get
        {
            if (m_MobileClearSchemeIndex == -1) m_MobileClearSchemeIndex = asset.FindControlSchemeIndex("MobileClear");
            return asset.controlSchemes[m_MobileClearSchemeIndex];
        }
    }
    public interface IMainMapActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
}
